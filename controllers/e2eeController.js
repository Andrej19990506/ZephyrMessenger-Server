import User from '../models/User.js';
import Message from '../models/Message.js';
import jwt from 'jsonwebtoken';
import crypto from 'crypto';

// ==================== PREKEY BUNDLE CONTROLLERS ====================

// POST /api/e2ee/prekey-bundle - –ó–∞–≥—Ä—É–∑–∏—Ç—å Prekey Bundle –Ω–∞ —Å–µ—Ä–≤–µ—Ä
export const uploadPreKeyBundle = async (req, res) => {
    try {
        const userId = req.user._id;
        const { identityKey, signedPreKey, oneTimePreKeys } = req.body;

        if (!identityKey || !signedPreKey) {
            return res.status(400).json({ 
                success: false, 
                message: 'Identity key –∏ signed prekey –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
            });
        }

        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º prekey bundle (libsignal format)
        user.identityKey = identityKey;
        user.signedPreKey = signedPreKey;
        user.oneTimePreKeys = oneTimePreKeys || [];
        
        // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º identity –∫–∞–∫ publicKey
        user.publicKey = identityKey;

        await user.save();

        console.log(`‚úÖ [E2EE] Prekey bundle –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name}: ${oneTimePreKeys?.length || 0} one-time keys`);

        res.json({ 
            success: true, 
            message: 'Prekey bundle –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            oneTimeKeysCount: user.oneTimePreKeys.length
        });
    } catch (error) {
        console.error('‚ùå [E2EE] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ prekey bundle:', error);
        res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

// GET /api/e2ee/prekey-bundle/:userId - –ü–æ–ª—É—á–∏—Ç—å Prekey Bundle –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getPreKeyBundle = async (req, res) => {
    try {
        const { userId } = req.params;

        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (!user.identityKey) {
            return res.status(404).json({ 
                success: false, 
                message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç prekey bundle. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.' 
            });
        }

        // –ë–µ—Ä–µ–º –æ–¥–∏–Ω one-time –∫–ª—é—á (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ
        let oneTimePreKey = null;
        if (user.oneTimePreKeys && user.oneTimePreKeys.length > 0) {
            oneTimePreKey = user.oneTimePreKeys[0];
            // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π one-time –∫–ª—é—á (Perfect Forward Secrecy!)
            user.oneTimePreKeys.splice(0, 1);
            await user.save();
            
            console.log(`üîë [E2EE] –í—ã–¥–∞–Ω one-time prekey ID ${oneTimePreKey.keyId} –¥–ª—è ${user.name}. –û—Å—Ç–∞–ª–æ—Å—å: ${user.oneTimePreKeys.length}`);
        } else {
            console.log(`‚ö†Ô∏è [E2EE] –£ ${user.name} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å one-time prekeys! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ signed prekey.`);
        }

        const bundle = {
            identityKey: user.identityKey, // libsignal Curve25519 format (33 bytes with 0x05 prefix)
            signedPreKey: user.signedPreKey,
            oneTimePreKey
        };

        res.json({
            success: true,
            bundle
        });
    } catch (error) {
        console.error('‚ùå [E2EE] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è prekey bundle:', error);
        res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

// POST /api/e2ee/public-key - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (deprecated, –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export const savePublicKey = async (req, res) => {
    try {
        const { publicKey } = req.body;
        const userId = req.user._id;

        if (!publicKey) {
            return res.status(400).json({ success: false, message: '–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findById(userId);
        
        if (!user) {
            return res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        user.publicKey = publicKey;
        await user.save();

        res.json({
            success: true,
            message: '–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
        res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

// GET /api/user/:id/public-key - –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserPublicKey = async (req, res) => {
    try {
        const { id } = req.params;

        // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const targetUser = await User.findById(id);
        
        if (!targetUser) {
            return res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (!targetUser.publicKey) {
            return res.status(404).json({ success: false, message: '–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        res.json({
            success: true,
            publicKey: targetUser.publicKey,
            userId: targetUser._id
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞:', error);
        res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

// POST /api/key/exchange/:userId - –û–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ –¥–ª—è ECDH
export const keyExchange = async (req, res) => {
    try {
        const { userId } = req.params;
        const { publicKey } = req.body;
        const currentUserId = req.user._id;

        if (!publicKey) {
            return res.status(400).json({ success: false, message: '–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentUser = await User.findById(currentUserId);
        
        if (!currentUser) {
            return res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const targetUser = await User.findById(userId);
        
        if (!targetUser) {
            return res.status(404).json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        currentUser.publicKey = publicKey;
        await currentUser.save();

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        res.json({
            success: true,
            targetPublicKey: targetUser.publicKey || null,
            message: '–û–±–º–µ–Ω –∫–ª—é—á–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–ª—é—á–∞–º–∏:', error);
        res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};

// POST /api/e2ee/generate-keys - –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—É –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const generateKeys = async (req, res) => {
    try {
        const currentUserId = req.user._id;

        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentUser = await User.findById(currentUserId);
        
        if (!currentUser) {
            return res.status(401).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—É –∫–ª—é—á–µ–π ECDH
        const keyPair = crypto.generateKeyPairSync('ec', {
            namedCurve: 'prime256v1',
            publicKeyEncoding: {
                type: 'spki',
                format: 'pem'
            },
            privateKeyEncoding: {
                type: 'pkcs8',
                format: 'pem'
            }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
        currentUser.publicKey = keyPair.publicKey;
        await currentUser.save();

        res.json({
            success: true,
            publicKey: keyPair.publicKey,
            privateKey: keyPair.privateKey, // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            message: '–ö–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π:', error);
        res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};
