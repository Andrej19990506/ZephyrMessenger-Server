import User from "../models/User.js";
import admin from 'firebase-admin';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * üîî –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firebase Cloud Messaging
 */

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin SDK
let firebaseInitialized = false;

const initializeFirebase = () => {
    if (firebaseInitialized) return;
    
    try {
        let serviceAccount;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (JSON —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
        if (process.env.FIREBASE_SERVICE_ACCOUNT) {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω JSON —Å—Ç—Ä–æ–∫–æ–π
            serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
        } else if (process.env.FIREBASE_SERVICE_ACCOUNT_PATH) {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            const filePath = path.resolve(__dirname, '..', process.env.FIREBASE_SERVICE_ACCOUNT_PATH);
            const fileContent = fs.readFileSync(filePath, 'utf8');
            serviceAccount = JSON.parse(fileContent);
            console.log('‚úÖ [FCM] Service account –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞:', filePath);
        } else {
            console.warn('‚ö†Ô∏è [FCM] FIREBASE_SERVICE_ACCOUNT –∏–ª–∏ FIREBASE_SERVICE_ACCOUNT_PATH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, FCM –æ—Ç–∫–ª—é—á–µ–Ω');
            return;
        }
        
        admin.initializeApp({
            credential: admin.credential.cert(serviceAccount)
        });
        
        firebaseInitialized = true;
        console.log('‚úÖ [FCM] Firebase Admin SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('‚ùå [FCM] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase:', error);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
initializeFirebase();

/**
 * üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è FCM —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const registerFCMToken = async (req, res) => {
    try {
        const { fcmToken } = req.body;
        const userId = req.user._id;

        console.log(`üîî [registerFCMToken] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è FCM —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

        if (!fcmToken) {
            return res.json({ success: false, message: "FCM —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º FCM —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updatedUser = await User.findByIdAndUpdate(
            userId,
            { fcmToken: fcmToken },
            { new: true }
        );

        if (!updatedUser) {
            return res.json({ success: false, message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        console.log(`‚úÖ [registerFCMToken] FCM —Ç–æ–∫–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${updatedUser.name}`);
        res.json({ success: true, message: "FCM —Ç–æ–∫–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });

    } catch (error) {
        console.error('‚ùå [registerFCMToken] –û—à–∏–±–∫–∞:', error);
        res.json({ success: false, message: error.message });
    }
};

/**
 * üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
export const sendPushNotification = async (userId, notification) => {
    try {
        if (!firebaseInitialized) {
            console.warn('‚ö†Ô∏è [FCM] Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
            return { success: false, error: 'Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' };
        }

        // –ü–æ–ª—É—á–∞–µ–º FCM —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findById(userId);
        if (!user || !user.fcmToken) {
            console.warn(`‚ö†Ô∏è [FCM] FCM —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
            return { success: false, error: 'FCM —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' };
        }

        // ‚ö†Ô∏è –í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û data (–±–µ–∑ notification)
        // –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏—Ç Android –í–°–ï–ì–î–ê –≤—ã–∑—ã–≤–∞—Ç—å onMessageReceived()
        // –¥–∞–∂–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ!
        const message = {
            data: {
                title: notification.title || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                body: notification.body || '',
                ...(notification.data || {})
            },
            token: user.fcmToken,
            android: {
                priority: 'high' // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
            }
        };

        console.log(`üì§ [FCM] –û—Ç–ø—Ä–∞–≤–∫–∞ data-only —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.name}:`, message.data);

        const response = await admin.messaging().send(message);
        console.log(`‚úÖ [FCM] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:`, response);

        return { success: true, response };

    } catch (error) {
        console.error('‚ùå [FCM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if (error.code === 'messaging/invalid-registration-token' || 
            error.code === 'messaging/registration-token-not-registered') {
            console.log(`üóëÔ∏è [FCM] –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ FCM —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
            await User.findByIdAndUpdate(userId, { fcmToken: null });
        }
        
        return { success: false, error: error.message };
    }
};

/**
 * üñºÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Cloudinary URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (64x64px –∫–∞–∫ –≤ Telegram)
 */
const getNotificationAvatar = (profilePicUrl) => {
    if (!profilePicUrl || profilePicUrl === '') return '';
    
    // –ï—Å–ª–∏ —ç—Ç–æ Cloudinary URL, –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    if (profilePicUrl.includes('cloudinary.com')) {
        // –ó–∞–º–µ–Ω—è–µ–º /upload/ –Ω–∞ /upload/w_64,h_64,c_fill/ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        return profilePicUrl.replace('/upload/', '/upload/w_64,h_64,c_fill,q_auto:low/');
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö CDN –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return profilePicUrl;
};

/**
 * üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
 */
export const sendMessageNotification = async (senderId, receiverId, messageText, isEncrypted = false, encryptedBlob = null) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        const sender = await User.findById(senderId).select('name profilePic');
        if (!sender) {
            console.warn(`‚ö†Ô∏è [FCM] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${senderId}`);
            return;
        }

        const notification = {
            title: sender.name,
            body: isEncrypted ? '–ø—Ä–∏—Å–ª–∞–ª –≤–∞–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üîí' : messageText,
            data: {
                type: 'message',
                senderId: senderId.toString(),
                senderName: sender.name,
                senderAvatar: getNotificationAvatar(sender.profilePic), // üì∏ –ú–∞–ª–µ–Ω—å–∫–∏–π –∞–≤–∞—Ç–∞—Ä 64x64
                message: messageText || '',
                isEncrypted: isEncrypted.toString(),
                encryptedMessage: encryptedBlob ? JSON.stringify(encryptedBlob) : '', // üîê –ó–ê–®–ò–§–†–û–í–ê–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ!
                timestamp: Date.now().toString()
            }
        };

        await sendPushNotification(receiverId, notification);

    } catch (error) {
        console.error('‚ùå [FCM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏:', error);
    }
};

/**
 * üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–µ
 */
export const sendCallNotification = async (callerId, receiverId, callType = 'voice') => {
    try {
        const caller = await User.findById(callerId).select('name profilePic');
        if (!caller) {
            console.warn(`‚ö†Ô∏è [FCM] –ó–≤–æ–Ω—è—â–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: ${callerId}`);
            return;
        }

        const notification = {
            title: `üìû –í—Ö–æ–¥—è—â–∏–π ${callType === 'video' ? '–≤–∏–¥–µ–æ' : '–∞—É–¥–∏–æ'} –∑–≤–æ–Ω–æ–∫`,
            body: `–û—Ç: ${caller.name}`,
            data: {
                type: 'call',
                callType: callType,
                callerId: callerId.toString(),
                callerName: caller.name,
                callerAvatar: getNotificationAvatar(caller.profilePic), // üì∏ –ú–∞–ª–µ–Ω—å–∫–∏–π –∞–≤–∞—Ç–∞—Ä 64x64
                timestamp: Date.now().toString()
            }
        };

        await sendPushNotification(receiverId, notification);

    } catch (error) {
        console.error('‚ùå [FCM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–µ:', error);
    }
};

/**
 * üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ typing indicator
 */
export const sendTypingNotification = async (userId, receiverId, isTyping) => {
    try {
        const user = await User.findById(userId).select('name');
        if (!user) return;

        const notification = {
            data: {
                type: 'typing',
                userId: userId.toString(),
                userName: user.name,
                isTyping: isTyping.toString(),
                timestamp: Date.now().toString()
            }
        };

        // –î–ª—è typing indicator –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ data payload (–±–µ–∑ notification)
        // —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const receiver = await User.findById(receiverId);
        if (!receiver || !receiver.fcmToken) return;

        if (firebaseInitialized) {
            await admin.messaging().send({
                data: notification.data,
                token: receiver.fcmToken
            });
        }

    } catch (error) {
        console.error('‚ùå [FCM] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ typing notification:', error);
    }
};

/**
 * üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ (–ø—Ä–∏ logout)
 */
export const removeFCMToken = async (req, res) => {
    try {
        const userId = req.user._id;

        console.log(`üóëÔ∏è [removeFCMToken] –£–¥–∞–ª–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

        await User.findByIdAndUpdate(userId, { fcmToken: null });

        console.log(`‚úÖ [removeFCMToken] FCM —Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω`);
        res.json({ success: true, message: "FCM —Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω" });

    } catch (error) {
        console.error('‚ùå [removeFCMToken] –û—à–∏–±–∫–∞:', error);
        res.json({ success: false, message: error.message });
    }
};

/**
 * üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ FCM
 */
export const getFCMStatus = async (req, res) => {
    try {
        const userId = req.user._id;
        const user = await User.findById(userId).select('fcmToken');

        res.json({
            success: true,
            hasToken: !!user?.fcmToken,
            firebaseInitialized: firebaseInitialized
        });

    } catch (error) {
        console.error('‚ùå [getFCMStatus] –û—à–∏–±–∫–∞:', error);
        res.json({ success: false, message: error.message });
    }
};


