import User from "../models/User.js";
import Message from "../models/Message.js";
import cloudinary from "../lib/cloudinary.js";
import { io, userSocketMap} from "../server.js";
// –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (E2EE)
import multer from 'multer';
import { sendMessageNotification } from './fcmController.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏
const upload = multer({ 
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 10 * 1024 * 1024, // 10MB –º–∞–∫—Å–∏–º—É–º
    },
    fileFilter: (req, file, cb) => {
        if (file.mimetype.startsWith('image/')) {
            cb(null, true);
        } else {
            cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
        }
    }
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
export const uploadSingle = upload.single('image');



//Get only users with whom the logged in user has messages
export const getUsersForSidebar = async (req, res) => {
    try {
       const userId = req.user._id;
       
       // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
       const messagesWithUsers = await Message.aggregate([
           {
               $match: {
                   $or: [
                       {senderId: userId},
                       {receiverId: userId}
                   ]
               }
           },
           {
               $group: {
                   _id: null,
                   userIds: {
                       $addToSet: {
                           $cond: [
                               { $eq: ["$senderId", userId] },
                               "$receiverId",
                               "$senderId"
                           ]
                       }
                   }
               }
           }
       ]);

       // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
       if (!messagesWithUsers.length || !messagesWithUsers[0].userIds.length) {
           return res.json({success: true, users: [], unseenMessages: {}, lastMessages: {}});
       }

       // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
       const filteredUsers = await User.find({
           _id: { $in: messagesWithUsers[0].userIds }
       }).select("-password");

       console.log(`üë• [getUsersForSidebar] –ù–∞–π–¥–µ–Ω–æ ${filteredUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:`, 
           filteredUsers.map(user => ({ name: user.name, username: user.username, id: user._id })));

       //count number of messages  not seen and get last messages
       const unseenMessages = {}
       const lastMessages = {}
       const promises = filteredUsers.map(async (user) => {
        // Count unseen messages
        const unseenMsgs = await Message.find({senderId: user._id, receiverId: userId, seen: false});
        if(unseenMsgs.length > 0){
            unseenMessages[user._id] = unseenMsgs.length;
        }
        
        // Get last message between current user and this user
        const lastMessage = await Message.findOne({
            $or: [
                {senderId: userId, receiverId: user._id},
                {senderId: user._id, receiverId: userId}
            ]
        }).sort({createdAt: -1});
        
        if(lastMessage) {
            // E2EE: –°–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
            const messageObj = lastMessage.toObject();
            lastMessages[user._id] = messageObj;
        }
       })
       await Promise.all(promises);
       res.json({success: true, users: filteredUsers, unseenMessages, lastMessages});
    } catch (error) {
        console.log(error);
        res.json({success: false, message: error.message});
    }
}

//Get all messages for a user
export const getMessages = async (req, res) => {
    try {
        const {id:selectedUserId} = req.params;
        const myId = req.user._id;

        console.log(`üì® [getMessages] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${selectedUserId} –æ—Ç ${myId}`);

        const messages = await Message.find({
            $or: [
                {senderId: myId, receiverId: selectedUserId},
                {senderId: selectedUserId, receiverId: myId}
            ]
        })

        // –ù–ï –ø–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        // –≠—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ—á—Ç–µ–Ω–∏–∏

        // E2EE: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        const processedMessages = messages.map(message => message.toObject());

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        const user = await User.findById(myId);
        const scrollPosition = user.scrollPositions?.get(selectedUserId) || 0;

        console.log(`üì® [getMessages] –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∑–∏—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞: ${scrollPosition}`);

        res.json({success: true, messages: processedMessages, scrollPosition});
    } catch (error) {
        console.log(`‚ùå [getMessages] –û—à–∏–±–∫–∞:`, error);
        res.json({success: false, message: error.message});
    }
}

//api to mark a message as seen using message id

export const markMessageAsSeen = async (req, res) => {
    try {
        const {id} = req.params;
        await Message.findByIdAndUpdate(id, {seen: true});
        res.json({success: true, message: "Message marked as seen"});
    } catch (error) {
        console.log(error);
        res.json({success: false, message: error.message});
    }
}

//api to mark all messages from a specific user as seen
export const markMessagesAsSeen = async (req, res) => {
    try {
        const {userId} = req.params;
        const myId = req.user._id;
        
        console.log(`üëÅÔ∏è [markMessagesAsSeen] –ü–æ–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç ${userId} –¥–ª—è ${myId}`);
        
        // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        await Message.updateMany(
            {senderId: userId, receiverId: myId, seen: false}, 
            {seen: true}
        );
        
        res.json({success: true, message: "Messages marked as seen"});
    } catch (error) {
        console.log(`‚ùå [markMessagesAsSeen] –û—à–∏–±–∫–∞:`, error);
        res.json({success: false, message: error.message});
    }
}

//api to delete all messages with a specific user
export const deleteChatWithUser = async (req, res) => {
    try {
        const {userId} = req.params;
        const myId = req.user._id;
        
        console.log(`üóëÔ∏è [deleteChatWithUser] –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId} –¥–ª—è ${myId}`);
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã)
        const result = await Message.deleteMany({
            $or: [
                {senderId: myId, receiverId: userId},
                {senderId: userId, receiverId: myId}
            ]
        });
        
        console.log(`‚úÖ [deleteChatWithUser] –£–¥–∞–ª–µ–Ω–æ ${result.deletedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ WebSocket –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI —É –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const receiverSocketId = userSocketMap[userId];
        if(receiverSocketId){
            console.log(`üì° [deleteChatWithUser] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é`);
            console.log(`üì° [deleteChatWithUser] –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:`, {
                deletedBy: myId,
                deletedWith: userId,
                deletedByString: myId.toString(),
                deletedWithString: userId.toString()
            });
            io.to(receiverSocketId).emit("chatDeleted", {
                deletedBy: myId,
                deletedWith: userId
            });
        }
        
        res.json({
            success: true, 
            message: `Chat deleted successfully. ${result.deletedCount} messages removed.`,
            deletedCount: result.deletedCount
        });
    } catch (error) {
        console.log(`‚ùå [deleteChatWithUser] –û—à–∏–±–∫–∞:`, error);
        res.json({success: false, message: error.message});
    }
}

// Send a message to selected user
export const sendMessage = async (req, res) => {
    try {
        const{text, blob} = req.body; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É blob
        const receiverId = req.params.id;
        const senderId = req.user._id;

        console.log(`üì§ [sendMessage] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${senderId} –∫ ${receiverId}`);

        let imageUrl = null;
        let messageData = null;

        // E2EE: –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª blob, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å –±–µ–∑ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
        if(blob) {
            console.log(`üîê [sendMessage] –ü–æ–ª—É—á–µ–Ω E2EE blob –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞`);
            messageData = blob;
        }
        else if(text && text.trim()) {
            console.log(`üìù [sendMessage] –ü–æ–ª—É—á–µ–Ω –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞`);
            messageData = text;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if (req.file) {
            console.log(`üì∑ [sendMessage] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, {
                originalname: req.file.originalname,
                mimetype: req.file.mimetype,
                size: req.file.size
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –≤ Cloudinary –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ base64
            imageUrl = await new Promise((resolve, reject) => {
                cloudinary.uploader.upload_stream(
                    {
                        resource_type: 'auto',
                        quality: 85, // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
                        fetch_format: 'auto', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞
                        width: 1200, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —á–∞—Ç–µ
                        height: 1200, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —á–∞—Ç–µ
                        crop: 'limit', // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
                    },
                    (error, result) => {
                        if (error) {
                            console.error('‚ùå [sendMessage] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Cloudinary:', error);
                            reject(error);
                        } else {
                            console.log('‚úÖ [sendMessage] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Cloudinary:', result.secure_url);
                            resolve(result.secure_url);
                        }
                    }
                ).end(req.file.buffer);
            });
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const newMessage = await Message.create({
            text: blob ? '' : messageData, // E2EE: –æ—á–∏—â–∞–µ–º text –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            encryptedBlob: blob || undefined, // E2EE: —Å–æ—Ö—Ä–∞–Ω—è–µ–º blob –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ–ª–µ
            encrypted: !!blob, // E2EE blob –≤—Å–µ–≥–¥–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω
            image: imageUrl, 
            senderId, 
            receiverId
        });

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
        const messageForClient = newMessage.toObject();
        
        // E2EE: –ï—Å–ª–∏ —ç—Ç–æ blob, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        // E2EE: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        console.log(`üì° [sendMessage] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –∫–∞–∫ –µ—Å—Ç—å`);

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        const senderUser = await User.findById(senderId).select('name username profilePic');
        
        //Emit the message to the receiver`s socket
        const receiverSocketId = userSocketMap[receiverId];
        if(receiverSocketId){
            console.log(`üì° [sendMessage] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket –ø–æ–ª—É—á–∞—Ç–µ–ª—é`);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            io.to(receiverSocketId).emit("newMessage", {
                message: messageForClient,
                sender: {
                    _id: senderUser._id,
                    name: senderUser.name,
                    username: senderUser.username,
                    profilePic: senderUser.profilePic
                }
            });
        } else {
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å offline, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            console.log(`üì± [sendMessage] –ü–æ–ª—É—á–∞—Ç–µ–ª—å offline, –æ—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`);
            const isEncrypted = !!blob;
            const notificationText = imageUrl ? 'üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : (text || '');
            sendMessageNotification(senderId, receiverId, notificationText, isEncrypted);
        }

        console.log(`‚úÖ [sendMessage] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î`);
        res.json({success: true, message: messageForClient});
    } catch (error) {
        console.log(`‚ùå [sendMessage] –û—à–∏–±–∫–∞:`, error);
        res.json({success: false, message: error.message});
    }
}

//Delete message
export const deleteMessage = async (req, res) => {
    try {
        const {id:messageId} = req.params;
        const myId = req.user._id;

        const message = await Message.findById(messageId);
        if(!message) {
            return res.json({success: false, message: "Message not found"});
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
        if(message.senderId.toString() !== myId.toString()) {
            return res.json({success: false, message: "Unauthorized"});
        }

        await Message.findByIdAndDelete(messageId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
        const receiverSocketId = userSocketMap[message.receiverId.toString()];
        if(receiverSocketId){
            io.to(receiverSocketId).emit("messageDeleted", {messageId});
        }
        
        res.json({success: true, message: "Message deleted successfully"});
    } catch (error) {
        console.log(error);
        res.json({success: false, message: error.message});
    }
}

export const addReaction = async (req, res) => {
    try {
        const {messageId} = req.params;
        const {emoji} = req.body;
        const userId = req.user._id;

        const message = await Message.findById(messageId);
        if(!message) {
            return res.json({success: false, message: "Message not found"});
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∞–∫—Ü–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º —ç–º–æ–¥–∑–∏
        const existingReaction = message.reactions.find(
            reaction => reaction.userId.toString() === userId.toString() && reaction.emoji === emoji
        );

        if(existingReaction) {
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–µ–∞–∫—Ü–∏—é (–∫–ª–∏–∫ –ø–æ —Å–≤–æ–µ–π —Ä–µ–∞–∫—Ü–∏–∏)
            message.reactions = message.reactions.filter(
                reaction => !(reaction.userId.toString() === userId.toString() && reaction.emoji === emoji)
            );
        } else {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
            message.reactions = message.reactions.filter(
                reaction => reaction.userId.toString() !== userId.toString()
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é
            message.reactions.push({
                emoji,
                userId,
                createdAt: new Date()
            });
        }

        await message.save();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        const receiverSocketId = userSocketMap[message.receiverId.toString()];
        const senderSocketId = userSocketMap[message.senderId.toString()];
        
        if(receiverSocketId) {
            io.to(receiverSocketId).emit("messageUpdated", message);
        }
        if(senderSocketId) {
            io.to(senderSocketId).emit("messageUpdated", message);
        }

        res.json({success: true, message: "Reaction added successfully", updatedMessage: message});
    } catch (error) {
        console.log(error);
        res.json({success: false, message: error.message});
    }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è —á–∞—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
export const saveScrollPosition = async (req, res) => {
    try {
        let userId, position;
        
        console.log(`üíæ [saveScrollPosition] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞`);
        console.log(`üíæ [saveScrollPosition] Content-Type: ${req.headers['content-type']}`);
        console.log(`üíæ [saveScrollPosition] Body:`, req.body);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ sendBeacon
        if (req.headers['content-type'] === 'text/plain') {
            // sendBeacon –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            const data = JSON.parse(req.body);
            userId = data.userId;
            position = data.position;
            console.log(`üíæ [saveScrollPosition] –î–∞–Ω–Ω—ã–µ –∏–∑ sendBeacon: userId=${userId}, position=${position}`);
        } else {
            // –û–±—ã—á–Ω—ã–π JSON –∑–∞–ø—Ä–æ—Å
            userId = req.body.userId;
            position = req.body.position;
            console.log(`üíæ [saveScrollPosition] –î–∞–Ω–Ω—ã–µ –∏–∑ JSON: userId=${userId}, position=${position}`);
        }
        
        const myId = req.user._id;
        console.log(`üíæ [saveScrollPosition] –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é ${position} –¥–ª—è —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${myId})`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–∫—Ä–æ–ª–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await User.findByIdAndUpdate(myId, {
            $set: {
                [`scrollPositions.${userId}`]: position
            }
        });

        console.log(`‚úÖ [saveScrollPosition] –ü–æ–∑–∏—Ü–∏—è —Å–∫—Ä–æ–ª–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î`);

        res.json({success: true, message: "Scroll position saved successfully"});
    } catch (error) {
        console.log(`‚ùå [saveScrollPosition] –û—à–∏–±–∫–∞:`, error);
        res.json({success: false, message: error.message});
    }
}