import express from 'express'
import "dotenv/config"
import cors from 'cors'
import http from 'http'
import { connectDB } from './lib/db.js'
import userRouter from './routes/userRoutes.js'
import messageRouter from './routes/messageRoutes.js'
import e2eeRouter from './routes/e2eeRoutes.js'
import fcmRouter from './routes/fcmRoutes.js'
import { Server } from 'socket.io'
import User from './models/User.js'
import jwt from 'jsonwebtoken'
import messageBroker from './lib/messageBroker.js'

//create express app
const app = express()
const server = http.createServer(app)

// CORS origins - –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞
const allowedOrigins = process.env.NODE_ENV === 'production' 
    ? true // –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ –¥–æ–º–µ–Ω—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ
    : [
        process.env.FRONTEND_URL || "http://localhost:5173",
        "https://gameforlesson.vercel.app",
        "http://localhost:5173",
        /^https:\/\/.*\.vercel\.app$/, // –õ—é–±—ã–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã Vercel
        /^https:\/\/.*\.vercel\.dev$/  // Vercel preview URLs
    ];

console.log('üåê [CORS] –†–µ–∂–∏–º:', process.env.NODE_ENV);
console.log('üåê [CORS] –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã:', allowedOrigins);

//initialize socket.io
export const io = new Server(server,{
    cors: {
        origin: allowedOrigins,
        methods: ["GET", "POST"],
        credentials: true
    }
})

//store online users
export const userSocketMap = {}; // {userId: socketId}

// WebSocket authentication middleware
io.use(async (socket, next) => {
    try {
        console.log("üîê [WebSocket] –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", socket.handshake.auth);
        
        const token = socket.handshake.auth.token;
        
        if (!token) {
            console.log("‚ùå [WebSocket] –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω");
            return next(new Error('Authentication token required'));
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("üîç [WebSocket] –¢–æ–∫–µ–Ω —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω:", decoded);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findById(decoded.userId).select("-password");
        
        if (!user) {
            console.log("‚ùå [WebSocket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", decoded.userId);
            return next(new Error('User not found'));
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ socket
        socket.userId = user._id.toString();
        socket.user = user;
        
        console.log("‚úÖ [WebSocket] –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user.name);
        next();
        
    } catch (error) {
        console.log("‚ùå [WebSocket] –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error.message);
        next(new Error('Authentication failed'));
    }
});

//handle socket connection
io.on("connection",(socket)=>{
    const userId = socket.userId; // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π userId
    console.log("‚úÖ [WebSocket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω:", socket.user.name, "ID:", userId)

    if(userId){ 
        userSocketMap[userId] = socket.id 
        // ‚úÖ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º lastSeen –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –û–ù–õ–ê–ô–ù!
        // lastSeen –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        console.log("‚úÖ [WebSocket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–Ω–ª–∞–π–Ω —Å–ø–∏—Å–æ–∫:", userId)
        
        // üî• –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        io.emit("userStatusChanged", {
            userId: userId,
            lastSeen: null, // null –æ–∑–Ω–∞—á–∞–µ—Ç "–æ–Ω–ª–∞–π–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"
            isOnline: true
        });
        
        console.log("üì° [WebSocket] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ userStatusChanged (online):", userId);
    }

    //Emit online users to all connected clients
    io.emit("getOnlineUsers", Object.keys(userSocketMap))

    socket.on("disconnect",()=>{
        console.log("üîå [WebSocket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:", userId)
        delete userSocketMap[userId]
        
        const now = new Date();
        
        // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º lastSeen –¢–û–õ–¨–ö–û –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        User.findByIdAndUpdate(userId, {lastSeen: now})
            .then(()=>{
                console.log("‚è∞ [WebSocket] lastSeen –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId, "–≤—Ä–µ–º—è:", now.toISOString())
                
                // üî• –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º —Å–æ–±—ã—Ç–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                io.emit("userStatusChanged", {
                    userId: userId,
                    lastSeen: now.toISOString(),
                    isOnline: false
                });
                
                console.log("üì° [WebSocket] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ userStatusChanged:", userId);
            })
            .catch((error)=>{
                console.log("‚ùå [WebSocket] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è lastSeen:", error.message)
            })
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        io.emit("getOnlineUsers", Object.keys(userSocketMap))
    })

    socket.on("typing",(data)=>{
        console.log("‚å®Ô∏è [WebSocket] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—á–∞—Ç–∞–µ—Ç:", socket.user.name, "–¥–ª—è:", data.receiverId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å typing —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö —á–∞—Ç–æ–≤
        const receiverSocketId = userSocketMap[data.receiverId];
        if(receiverSocketId){
            socket.to(receiverSocketId).emit("userTyping",{
                senderId: userId,
                senderName: socket.user.name,
                isTyping: data.isTyping
            });
        }
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on("messageSeen",(data)=>{
        console.log("üëÅÔ∏è [WebSocket] –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ:", data.messageId, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", socket.user.name);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        const senderSocketId = userSocketMap[data.senderId];
        if(senderSocketId){
            socket.to(senderSocketId).emit("messageSeen",{
                messageId: data.messageId,
                senderId: data.senderId,
                readerId: userId,
                readerName: socket.user.name
            });
        }
    })

       // üî• –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω" - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
       socket.on("userOnline", async (data) => {
           console.log("üì° [WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ userOnline –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", socket.user.name, "ID:", userId);
           console.log("üì° [WebSocket] –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:", data);
           console.log("üîç [WebSocket] –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è userId:", userId);
           
           try {
               // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
               console.log("üîç [WebSocket] –í—ã–∑—ã–≤–∞–µ–º messageBroker.getMessagesFromQueue...");
               const queuedMessages = await messageBroker.getMessagesFromQueue(userId);
               console.log("üîç [WebSocket] –†–µ–∑—É–ª—å—Ç–∞—Ç getMessagesFromQueue:", queuedMessages.length, "—Å–æ–æ–±—â–µ–Ω–∏–π");
               
               if (queuedMessages.length > 0) {
                   console.log(`üì• [WebSocket] –ù–∞–π–¥–µ–Ω–æ ${queuedMessages.length} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${socket.user.name}`);
                   console.log("üì• [WebSocket] –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", queuedMessages[0]);
                   
                   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
                   socket.emit('queuedMessages', {
                       messages: queuedMessages
                   });
                   console.log("üì§ [WebSocket] –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É");
                   
                   // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                   await messageBroker.clearUserQueue(userId);
                   console.log(`‚úÖ [WebSocket] –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${socket.user.name}`);
               } else {
                   console.log(`üì≠ [WebSocket] –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${socket.user.name}`);
                   console.log("üîç [WebSocket] –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã, –∏–ª–∏ –æ—à–∏–±–∫–∞ Redis");
                   
                   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –∑–Ω–∞–ª —á—Ç–æ –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞
                   socket.emit('queuedMessages', {
                       messages: []
                   });
                   console.log("üì§ [WebSocket] –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É");
               }
           } catch (error) {
               console.error("‚ùå [WebSocket] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
               
               // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
               socket.emit('queuedMessages', {
                   messages: []
               });
           }
       });

       // üì¢ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
       socket.on("systemMessage", async (data) => {
           console.log("üì¢ [WebSocket] –ü–æ–ª—É—á–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", socket.user.name, "ID:", userId);
           console.log("üì¢ [WebSocket] –î–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", data);
           
           try {
               // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Message
               const Message = (await import('./models/Message.js')).default;
               
               // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
               const systemMessage = new Message({
                   text: data.text,
                   senderId: userId,
                   receiverId: userId, // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                   isSystemMessage: true,
                   systemType: data.systemType,
                   seen: false,
                   status: 'delivered',
                   createdAt: new Date(data.timestamp || Date.now())
               });
               
               await systemMessage.save();
               console.log("‚úÖ [WebSocket] –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î:", systemMessage._id);
               
               // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
               const contacts = await Message.aggregate([
                   {
                       $match: {
                           $or: [
                               { senderId: userId },
                               { receiverId: userId }
                           ]
                       }
                   },
                   {
                       $group: {
                           _id: null,
                           userIds: {
                               $addToSet: {
                                   $cond: [
                                       { $eq: ["$senderId", userId] },
                                       "$receiverId",
                                       "$senderId"
                                   ]
                               }
                           }
                       }
                   }
               ]);
               
               if (contacts.length > 0 && contacts[0].userIds.length > 0) {
                   const contactIds = contacts[0].userIds.map(id => id.toString());
                   console.log(`üì¢ [WebSocket] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${contactIds.length} –∫–æ–Ω—Ç–∞–∫—Ç–∞–º`);
                   
                   // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
                   contactIds.forEach(contactId => {
                       const socketId = userSocketMap[contactId];
                       if (socketId) {
                           io.to(socketId).emit('systemMessage', {
                               id: systemMessage._id.toString(),
                               text: data.text,
                               systemType: data.systemType,
                               timestamp: data.timestamp,
                               isSystemMessage: true,
                               senderId: userId,
                               senderName: socket.user.name
                           });
                       }
                   });
                   
                   console.log("‚úÖ [WebSocket] –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º");
               } else {
                   console.log("üì¢ [WebSocket] –ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
               }
               
           } catch (error) {
               console.error("‚ùå [WebSocket] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
           }
       });
})


//middleware
app.use(express.json({limit:'100mb'}))
app.use(express.text({limit:'10mb'})) // –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ sendBeacon
app.use(express.urlencoded({ extended: true, limit: '100mb' })) // –î–ª—è FormData
app.use(cors({
    origin: allowedOrigins,
    credentials: true
}))

//routes setup
app.use("/api/status",(req,res)=> res.status(200).send("Server is running"))
app.use("/api/auth", userRouter)
app.use("/api/user", userRouter)
app.use("/api/message", messageRouter)
app.use("/api/e2ee", e2eeRouter)
app.use("/api/fcm", fcmRouter)

//connect to MongoDB
await connectDB()


    const PORT = process.env.PORT || 5000
    server.listen(PORT,()=>{
        console.log(`Server is running on port ${PORT}`)
    })

