import Redis from 'ioredis';

class MessageBroker {
  constructor() {
    this.redis = null;
    this.isRedisAvailable = false;
    this.fallbackQueue = new Map(); // Fallback –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
    
    try {
      this.redis = new Redis({
        host: 'localhost',
        port: 6379,
        retryDelayOnFailover: 100,
        enableReadyCheck: false,
        maxRetriesPerRequest: null,
        lazyConnect: true, // –ù–µ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å—Ä–∞–∑—É
      });

      this.redis.on('connect', () => {
        console.log('‚úÖ [MessageBroker] Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
        this.isRedisAvailable = true;
      });

      this.redis.on('error', (err) => {
        if (this.isRedisAvailable) { // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É
          console.error('‚ùå [MessageBroker] Redis –æ—à–∏–±–∫–∞:', err);
          console.warn('‚ö†Ô∏è [MessageBroker] –û—Ç–∫–ª—é—á–∞–µ–º Redis, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
          this.isRedisAvailable = false;
          
          // –û—Ç–∫–ª—é—á–∞–µ–º Redis —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å–ø–∞–º–∏–ª –æ—à–∏–±–∫–∞–º–∏
          this.redis.disconnect().catch(() => {});
        }
      });

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      this.redis.connect().catch((error) => {
        if (this.isRedisAvailable) { // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å
          console.warn('‚ö†Ô∏è [MessageBroker] Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
          this.isRedisAvailable = false;
        }
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è [MessageBroker] Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
      this.isRedisAvailable = false;
    }
  }

  /**
   * üì§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async addMessageToQueue(userId, message) {
    try {
      const messageData = {
        ...message,
        timestamp: Date.now(),
        id: message._id || `msg_${Date.now()}_${Math.random()}`
      };

      if (this.isRedisAvailable && this.redis) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const queueKey = `user_queue:${userId}`;
        const messageDataJson = JSON.stringify(messageData);
        
        await this.redis.lpush(queueKey, messageDataJson);
        await this.redis.expire(queueKey, 86400); // 24 hours TTL
        
        console.log(`üì§ [MessageBroker] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Redis –æ—á–µ—Ä–µ–¥—å –¥–ª—è ${userId}`);
        return true;
      } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å
        if (!this.fallbackQueue.has(userId)) {
          this.fallbackQueue.set(userId, []);
        }
        
        const userQueue = this.fallbackQueue.get(userId);
        userQueue.push(messageData);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ (–º–∞–∫—Å–∏–º—É–º 100 —Å–æ–æ–±—â–µ–Ω–∏–π)
        if (userQueue.length > 100) {
          userQueue.splice(0, userQueue.length - 100);
        }
        
        console.log(`üì§ [MessageBroker] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ fallback –æ—á–µ—Ä–µ–¥—å –¥–ª—è ${userId} (–≤ –ø–∞–º—è—Ç–∏)`);
        return true;
      }
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      
      // –ï—Å–ª–∏ Redis —É–ø–∞–ª, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback
      if (this.isRedisAvailable) {
        console.warn('‚ö†Ô∏è [MessageBroker] Redis —É–ø–∞–ª, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback');
        this.isRedisAvailable = false;
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å fallback
        return this.addMessageToQueue(userId, message);
      }
      
      return false;
    }
  }

  /**
   * üì• –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getMessagesFromQueue(userId) {
    try {
      if (this.isRedisAvailable && this.redis) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const queueKey = `user_queue:${userId}`;
        console.log(`üîç [MessageBroker] –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis —Å –∫–ª—é—á–æ–º: ${queueKey}`);
        
        const messages = await this.redis.lrange(queueKey, 0, -1);
        console.log(`üîç [MessageBroker] Redis –≤–µ—Ä–Ω—É–ª ${messages.length} —Å—ã—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
        
        const parsedMessages = messages.map(msg => JSON.parse(msg));
        
        console.log(`üì• [MessageBroker] –ü–æ–ª—É—á–µ–Ω–æ ${parsedMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Redis –¥–ª—è ${userId}`);
        return parsedMessages;
      } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–º—è—Ç—å
        const messages = this.fallbackQueue.get(userId) || [];
        console.log(`üì• [MessageBroker] –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ fallback –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è ${userId}`);
        return messages;
      }
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      
      // –ï—Å–ª–∏ Redis —É–ø–∞–ª, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback
      if (this.isRedisAvailable) {
        console.warn('‚ö†Ô∏è [MessageBroker] Redis —É–ø–∞–ª –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback');
        this.isRedisAvailable = false;
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å fallback
        return this.getMessagesFromQueue(userId);
      }
      
      return [];
    }
  }

  /**
   * üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
   */
  async clearUserQueue(userId) {
    try {
      if (this.isRedisAvailable && this.redis) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const queueKey = `user_queue:${userId}`;
        await this.redis.del(queueKey);
        console.log(`üóëÔ∏è [MessageBroker] Redis –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ –¥–ª—è ${userId}`);
        return true;
      } else {
        // Fallback: –æ—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
        this.fallbackQueue.delete(userId);
        console.log(`üóëÔ∏è [MessageBroker] Fallback –æ—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ –¥–ª—è ${userId}`);
        return true;
      }
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
      
      // –ï—Å–ª–∏ Redis —É–ø–∞–ª, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback
      if (this.isRedisAvailable) {
        console.warn('‚ö†Ô∏è [MessageBroker] Redis —É–ø–∞–ª –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback');
        this.isRedisAvailable = false;
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å fallback
        return this.clearUserQueue(userId);
      }
      
      return false;
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π
   */
  async getQueueStats() {
    try {
      const keys = await this.redis.keys('user_queue:*');
      const stats = {};
      
      for (const key of keys) {
        const userId = key.replace('user_queue:', '');
        const length = await this.redis.llen(key);
        stats[userId] = length;
      }
      
      console.log('üìä [MessageBroker] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π:', stats);
      return stats;
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {};
    }
  }

  /**
   * üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è real-time)
   */
  async subscribeToUserMessages(userId, callback) {
    try {
      const channel = `user_messages:${userId}`;
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
      this.redis.subscribe(channel);
      
      this.redis.on('message', (channel, message) => {
        if (channel === `user_messages:${userId}`) {
          const messageData = JSON.parse(message);
          callback(messageData);
        }
      });
      
      console.log(`üîÑ [MessageBroker] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${userId}`);
      return true;
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      return false;
    }
  }

  /**
   * üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–¥–ª—è real-time)
   */
  async publishMessage(userId, message) {
    try {
      const channel = `user_messages:${userId}`;
      const messageData = JSON.stringify(message);
      
      await this.redis.publish(channel, messageData);
      console.log(`üì¢ [MessageBroker] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –¥–ª—è ${userId}`);
      return true;
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const messageBroker = new MessageBroker();

export default messageBroker;
