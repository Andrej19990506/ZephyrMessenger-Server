const Redis = require('ioredis');

class MessageBroker {
  constructor() {
    this.redis = new Redis({
      host: 'localhost',
      port: 6379,
      retryDelayOnFailover: 100,
      enableReadyCheck: false,
      maxRetriesPerRequest: null,
    });

    this.redis.on('connect', () => {
      console.log('‚úÖ [MessageBroker] Redis –ø–æ–¥–∫–ª—é—á–µ–Ω');
    });

    this.redis.on('error', (err) => {
      console.error('‚ùå [MessageBroker] Redis –æ—à–∏–±–∫–∞:', err);
    });
  }

  /**
   * üì§ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async addMessageToQueue(userId, message) {
    try {
      const queueKey = `user_queue:${userId}`;
      const messageData = JSON.stringify({
        ...message,
        timestamp: Date.now(),
        id: message._id || `msg_${Date.now()}_${Math.random()}`
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å (—Å–ø–∏—Å–æ–∫)
      await this.redis.lpush(queueKey, messageData);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL (24 —á–∞—Å–∞)
      await this.redis.expire(queueKey, 86400);
      
      console.log(`üì§ [MessageBroker] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è ${userId}`);
      return true;
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return false;
    }
  }

  /**
   * üì• –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getMessagesFromQueue(userId) {
    try {
      const queueKey = `user_queue:${userId}`;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      const messages = await this.redis.lrange(queueKey, 0, -1);
      
      // –ü–∞—Ä—Å–∏–º JSON
      const parsedMessages = messages.map(msg => JSON.parse(msg));
      
      console.log(`üì• [MessageBroker] –ü–æ–ª—É—á–µ–Ω–æ ${parsedMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è ${userId}`);
      return parsedMessages;
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      return [];
    }
  }

  /**
   * üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
   */
  async clearUserQueue(userId) {
    try {
      const queueKey = `user_queue:${userId}`;
      await this.redis.del(queueKey);
      console.log(`üóëÔ∏è [MessageBroker] –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ –¥–ª—è ${userId}`);
      return true;
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
      return false;
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π
   */
  async getQueueStats() {
    try {
      const keys = await this.redis.keys('user_queue:*');
      const stats = {};
      
      for (const key of keys) {
        const userId = key.replace('user_queue:', '');
        const length = await this.redis.llen(key);
        stats[userId] = length;
      }
      
      console.log('üìä [MessageBroker] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π:', stats);
      return stats;
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {};
    }
  }

  /**
   * üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è real-time)
   */
  async subscribeToUserMessages(userId, callback) {
    try {
      const channel = `user_messages:${userId}`;
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
      this.redis.subscribe(channel);
      
      this.redis.on('message', (channel, message) => {
        if (channel === `user_messages:${userId}`) {
          const messageData = JSON.parse(message);
          callback(messageData);
        }
      });
      
      console.log(`üîÑ [MessageBroker] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${userId}`);
      return true;
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      return false;
    }
  }

  /**
   * üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–¥–ª—è real-time)
   */
  async publishMessage(userId, message) {
    try {
      const channel = `user_messages:${userId}`;
      const messageData = JSON.stringify(message);
      
      await this.redis.publish(channel, messageData);
      console.log(`üì¢ [MessageBroker] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –¥–ª—è ${userId}`);
      return true;
    } catch (error) {
      console.error('‚ùå [MessageBroker] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const messageBroker = new MessageBroker();

module.exports = messageBroker;
